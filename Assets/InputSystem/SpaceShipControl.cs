//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputSystem/SpaceShipControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceShipControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceShipControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceShipControl"",
    ""maps"": [
        {
            ""name"": ""MoveAndShoot"",
            ""id"": ""7031b89a-636a-411b-b820-c5f22ff20fa2"",
            ""actions"": [
                {
                    ""name"": ""StartDrag"",
                    ""type"": ""Button"",
                    ""id"": ""9f3c8b78-aeb2-4d2c-8557-87a7e1ac95af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""7a41ca4c-c49e-4d85-b43a-73aa3362df65"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""60196d2c-2fd0-46ad-bf43-6a02f212dbae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SpaceShip"",
                    ""action"": ""StartDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f3409c4-7711-4015-acb8-1c53f0b88123"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SpaceShip"",
                    ""action"": ""StartDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4aee2c3b-bd2b-4658-8a01-55075cc8a51d"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SpaceShip"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bd659a8-90a4-4c8a-be4e-a1fcc595a86e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SpaceShip"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""SpaceShip"",
            ""bindingGroup"": ""SpaceShip"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MoveAndShoot
        m_MoveAndShoot = asset.FindActionMap("MoveAndShoot", throwIfNotFound: true);
        m_MoveAndShoot_StartDrag = m_MoveAndShoot.FindAction("StartDrag", throwIfNotFound: true);
        m_MoveAndShoot_Position = m_MoveAndShoot.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveAndShoot
    private readonly InputActionMap m_MoveAndShoot;
    private IMoveAndShootActions m_MoveAndShootActionsCallbackInterface;
    private readonly InputAction m_MoveAndShoot_StartDrag;
    private readonly InputAction m_MoveAndShoot_Position;
    public struct MoveAndShootActions
    {
        private @SpaceShipControl m_Wrapper;
        public MoveAndShootActions(@SpaceShipControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartDrag => m_Wrapper.m_MoveAndShoot_StartDrag;
        public InputAction @Position => m_Wrapper.m_MoveAndShoot_Position;
        public InputActionMap Get() { return m_Wrapper.m_MoveAndShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveAndShootActions set) { return set.Get(); }
        public void SetCallbacks(IMoveAndShootActions instance)
        {
            if (m_Wrapper.m_MoveAndShootActionsCallbackInterface != null)
            {
                @StartDrag.started -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnStartDrag;
                @StartDrag.performed -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnStartDrag;
                @StartDrag.canceled -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnStartDrag;
                @Position.started -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_MoveAndShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartDrag.started += instance.OnStartDrag;
                @StartDrag.performed += instance.OnStartDrag;
                @StartDrag.canceled += instance.OnStartDrag;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public MoveAndShootActions @MoveAndShoot => new MoveAndShootActions(this);
    private int m_SpaceShipSchemeIndex = -1;
    public InputControlScheme SpaceShipScheme
    {
        get
        {
            if (m_SpaceShipSchemeIndex == -1) m_SpaceShipSchemeIndex = asset.FindControlSchemeIndex("SpaceShip");
            return asset.controlSchemes[m_SpaceShipSchemeIndex];
        }
    }
    public interface IMoveAndShootActions
    {
        void OnStartDrag(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
